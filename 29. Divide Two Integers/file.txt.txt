Intuition:
find the maximum number in power of two which can be substracted from the actual number. Substract it and add in answer.
Do this untill divisor <= dividend.

Approach:
find the maximum number which is numdivisor >= dividend and add this number in ans as well as minus numdivisor from dividend. Do this untill divisor <= dividend. Handle sign and range explicitly.

Complexity:
Time complexity:
Depends on the Testcase and might be O(logn)^2;

Space complexity:
No extra space taken so O(1).

Code:
class Solution {
public:
    int divide(int dividend, int divisor) {
        if(divisor==dividend) return 1;
        if(divisor==1) return dividend;

        int sign= 1;
        if(dividend >=0 && divisor<0) sign=-1;
        else if (dividend <= 0 && divisor>0) sign=-1;
        long n= abs(dividend);
        long q= abs(divisor);

        long ans=0;
        while(n>=q){
            int count=0;
            while(n>=q<<(count+1)){ //q*2^count+1
                count++;
            }
            ans+=1<<count; //2^count
            n-=q<<count; //q * 2^count
        }
        
        if(ans== 1<<31 && sign==-1) return INT_MIN;
        if(ans== 1<<31 && sign==1) return INT_MAX;

        return ans*sign;
    }
};